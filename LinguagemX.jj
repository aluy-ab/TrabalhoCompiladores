/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\LinguagemX.jj */
/*@egen*/PARSER_BEGIN(X)

import java.io.*;
import java.util.*;

public class X/*@bgen(jjtree)*/implements XTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTXState jjtree = new JJTXState();

/*@egen*/

    public static void main(String args[]) throws ParseException, IOException {

        Scanner scan = new Scanner(System.in);
        String nomeArq;

        System.out.println("Digite o nome do arquivo: ");

        nomeArq = System.getProperty("user.dir") + "\\" + scan.nextLine();

        X lex = new X(new java.io.FileInputStream(nomeArq));
        SimpleNode root = lex.Start();
        root.dump("");

    }

}

PARSER_END(X)

SKIP :
{
    " "
|   "\t"
|   "\n"
|   "\r"
}

TOKEN : //s\u00c3\u00admbolos
{
    <APARENTESES: "(">
|    <FPARENTESES: ")">
|    <ACOLCHETES: "[">
|    <FCOLCHETES: "]">
|    <ACHAVES: "{">
|    <FCHAVES: "}">
|    <PONTOVIRGULA: ";">
|    <VIRGULA: ",">
}

TOKEN : //palavras reservadas
{
    <INT: "int">
|    <CHAR: "char">
|    <VOID: "void">
|    <IF: "if">
|    <ELSE: "else">
|    <WHILE: "while">
|    <FOR: "for">
|    <RETURN: "return">
}

TOKEN : //operadores
{
    <SOMA: "+">
|    <SUBTRACAO: "-">
|    <MULTIPLICACAO: "*">
|    <DIVISAO: "/">
|    <ATRIBUICAO: "=">
|    <IGUALDADE: "==">
|    <MAIOR: ">">
|    <MENOR: "<">
|    <MAIORIGUAL: ">=">
|    <MENORIGUAL: "<=">
|    <DIFERENTE: "!=">
|    <AND: "&&">
|    <OR: "||">
|    <NOT: "!">
}

TOKEN :
{
    <NUM : (["0"-"9"])+(".")*(["0"-"9"])+> 
|    <ID : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>
}

SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Variavel() <APARENTESES> <FPARENTESES> <ACHAVES> Comandos() <FCHAVES> <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void X() :
{/*@bgen(jjtree) X */
 SimpleNode jjtn000 = new SimpleNode(JJTX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) X */
    try {
/*@egen*/
    
    (
        <APARENTESES> { System.out.println("Abre parenteses: (");}
    |    <FPARENTESES> { System.out.println("Fecha parenteses: )");}
    |    <ACOLCHETES> { System.out.println("Abre colchetes: [");}
    |    <FCOLCHETES> { System.out.println("Fecha colchetes: ]");}
    |    <ACHAVES> { System.out.println("Abre chaves: {");}
    |    <FCHAVES> { System.out.println("Fecha chaves: }");}
    |    <PONTOVIRGULA> { System.out.println("Ponto e virgula: ;");}
    |    <VIRGULA> { System.out.println("Ponto e virgula: ,");}

    |    <INT> { System.out.println("Palavra reservada: int");}
    |    <CHAR> { System.out.println("Palavra reservada: char");}
    |    <IF> { System.out.println("Palavra reservada: if");}
    |    <ELSE> { System.out.println("Palavra reservada: else");}
    |    <WHILE> { System.out.println("Palavra reservada: while");}
    |    <FOR> { System.out.println("Palavra reservada: for");}
    |    <RETURN> { System.out.println("Palavra reservada: return");}

    |    <SOMA> { System.out.println("Operador: +");}
    |    <SUBTRACAO> { System.out.println("Operador: -");}
    |    <MULTIPLICACAO> { System.out.println("Operador: *");}
    |    <DIVISAO> { System.out.println("Operador: /");}
    |    <ATRIBUICAO> { System.out.println("Operador: =");}
    |    <IGUALDADE> { System.out.println("Operador: ==");}
    |    <MAIOR> { System.out.println("Operador: >");}
    |    <MENOR> { System.out.println("Operador: <");}
    |    <MAIORIGUAL> { System.out.println("Operador: >=");}
    |    <MENORIGUAL> { System.out.println("Operador: <=");}
    |    <DIFERENTE> { System.out.println("Operador: !=");}
    |    <AND> { System.out.println("Operador: &&");}
    |    <OR> { System.out.println("Operador: ||");}
    |    <NOT> { System.out.println("Operador: !");}

    |    t = <NUM> { System.out.println("N\u00c3\u00bamero: " + t.image);}
    |    t = <ID> { System.out.println("Identificador: " + t.image);}
    )*
    <EOF>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Comandos()      :
{/*@bgen(jjtree) COM */
  SimpleNode jjtn000 = new SimpleNode(JJTCOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COM */
    try {
/*@egen*/
    (Variavel())* (ComandosEspecificos())* Return()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ComandosEspecificos()         :
{/*@bgen(jjtree) COMES */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COMES */
    try {
/*@egen*/
    Condicao() | Loop() | Operacao()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Condicao()     :
{/*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF */
    try {
/*@egen*/
    <IF> <APARENTESES> Operacao() <FPARENTESES> <ACHAVES> Comandos() <FCHAVES> Contradicao()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Contradicao()       :
{/*@bgen(jjtree) ELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ELSE */
    try {
/*@egen*/
    (<ELSE> <ACHAVES> Comandos() <FCHAVES>)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Return()      :
{/*@bgen(jjtree) RET */
  SimpleNode jjtn000 = new SimpleNode(JJTRET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RET */
    try {
/*@egen*/
    (<RETURN> Variavel() <PONTOVIRGULA>)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Operacao()     :
{/*@bgen(jjtree) OP */
  SimpleNode jjtn000 = new SimpleNode(JJTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OP */
    try {
/*@egen*/
    Operando() SinalOp() Operando() (SinalOp() Operando())? Fimdelinha() | Not()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Operando()        :
{/*@bgen(jjtree) OPVAR */
  SimpleNode jjtn000 = new SimpleNode(JJTOPVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPVAR */
    try {
/*@egen*/
    <ID> | <NUM>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SinalOp()      :
{/*@bgen(jjtree) SOP */
  SimpleNode jjtn000 = new SimpleNode(JJTSOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SOP */
    try {
/*@egen*/
    <SOMA> | <SUBTRACAO> | <MULTIPLICACAO> | <DIVISAO> | <IGUALDADE> | <ATRIBUICAO> | <MAIOR> |
    <MENOR> | <MAIORIGUAL> | <MENORIGUAL> | <DIFERENTE> | <AND> | <OR>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Not()      :
{/*@bgen(jjtree) NOT */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NOT */
    try {
/*@egen*/
    <NOT> Variavel() Fimdelinha()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Variaveis()          :
{/*@bgen(jjtree) VARPLUS */
  SimpleNode jjtn000 = new SimpleNode(JJTVARPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VARPLUS */
    try {
/*@egen*/
    <VIRGULA> <ID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Variavel()      :
{/*@bgen(jjtree) VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VAR */
    try {
/*@egen*/
    TipoVariavel() <ID> (Variaveis())? Fimdelinha()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TipoVariavel()          :
{/*@bgen(jjtree) VARTYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTVARTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VARTYPE */
    try {
/*@egen*/
    <INT> | <CHAR> | <VOID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void Loop()       :
{/*@bgen(jjtree) LOOP */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LOOP */
    try {
/*@egen*/
    <WHILE> <APARENTESES> Operacao() <FPARENTESES> <ACHAVES> Comandos() <FCHAVES> | <FOR> <APARENTESES>
    Operacao() <PONTOVIRGULA> Operacao() <PONTOVIRGULA> Operacao() <FPARENTESES> <ACHAVES> Comandos() <FCHAVES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Fimdelinha()     :
{/*@bgen(jjtree) PV */
  SimpleNode jjtn000 = new SimpleNode(JJTPV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PV */
    try {
/*@egen*/
    (<PONTOVIRGULA>)?/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}