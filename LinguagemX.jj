PARSER_BEGIN(X)

import java.io.*;
import java.util.*;

public class X {

    public static void main(String args[]) throws ParseException, IOException {

        Scanner scan = new Scanner(System.in);
        String nomeArq;

        System.out.println("Digite o nome do arquivo: ");

        nomeArq = System.getProperty("user.dir") + "\\" + scan.nextLine();

        X lex = new X(new FileInputStream(nomeArq));
        lex.X();

    }

}

PARSER_END(X)

SKIP :
{
    " "
|   "\t"
|   "\n"
|   "\r"
}

TOKEN : //símbolos
{
    <APARENTESES: "(">
|    <FPARENTESES: ")">
|    <ACOLCHETES: "[">
|    <FCOLCHETES: "]">
|    <ACHAVES: "{">
|    <FCHAVES: "}">
|    <PONTOVIRGULA: ";">
|    <VIRGULA: ",">
}

TOKEN : //palavras reservadas
{
    <INT: "int">
|    <CHAR: "char">
|    <VOID: "void">
|    <IF: "if">
|    <ELSE: "else">
|    <WHILE: "while">
|    <FOR: "for">
|    <RETURN: "return">
}

TOKEN : //operadores
{
    <SOMA: "+">
|    <SUBTRACAO: "-">
|    <MULTIPLICACAO: "*">
|    <DIVISAO: "/">
|    <ATRIBUICAO: "=">
|    <IGUALDADE: "==">
|    <MAIOR: ">">
|    <MENOR: "<">
|    <MAIORIGUAL: ">=">
|    <MENORIGUAL: "<=">
|    <NEGACAO: "!=">
|    <AND: "&&">
|    <OR: "||">
|    <NOT: "!">
}

TOKEN :
{
    <NUM : (["0"-"9"])+(".")*(["0"-"9"])+> 
|    <ID : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>
}

void X() :
{Token t;}
{
    Function()<APARENTESES>Variavel()<FPARENTESES><ACHAVES>Comandos()<FCHAVES>
    (
        <APARENTESES> { System.out.println("Abre parenteses: (");}
    |    <FPARENTESES> { System.out.println("Fecha parenteses: )");}
    |    <ACOLCHETES> { System.out.println("Abre colchetes: [");}
    |    <FCOLCHETES> { System.out.println("Fecha colchetes: ]");}
    |    <ACHAVES> { System.out.println("Abre chaves: {");}
    |    <FCHAVES> { System.out.println("Fecha chaves: }");}
    |    <PONTOVIRGULA> { System.out.println("Ponto e virgula: ;");}
    |    <VIRGULA> { System.out.println("Ponto e virgula: ,");}

    |    <INT> { System.out.println("Palavra reservada: int");}
    |    <CHAR> { System.out.println("Palavra reservada: char");}
    |    <IF> { System.out.println("Palavra reservada: if");}
    |    <ELSE> { System.out.println("Palavra reservada: else");}
    |    <WHILE> { System.out.println("Palavra reservada: while");}
    |    <FOR> { System.out.println("Palavra reservada: for");}
    |    <RETURN> { System.out.println("Palavra reservada: return");}

    |    <SOMA> { System.out.println("Operador: +");}
    |    <SUBTRACAO> { System.out.println("Operador: -");}
    |    <MULTIPLICACAO> { System.out.println("Operador: *");}
    |    <DIVISAO> { System.out.println("Operador: /");}
    |    <ATRIBUICAO> { System.out.println("Operador: =");}
    |    <IGUALDADE> { System.out.println("Operador: ==");}
    |    <MAIOR> { System.out.println("Operador: >");}
    |    <MENOR> { System.out.println("Operador: <");}
    |    <MAIORIGUAL> { System.out.println("Operador: >=");}
    |    <MENORIGUAL> { System.out.println("Operador: <=");}
    |    <NEGACAO> { System.out.println("Operador: !=");}
    |    <AND> { System.out.println("Operador: &&");}
    |    <OR> { System.out.println("Operador: ||");}
    |    <NOT> { System.out.println("Operador: !");}

    |    t = <NUM> { System.out.println("Número: " + t.image);}
    |    t = <ID> { System.out.println("Identificador: " + t.image);}
    )*
    <EOF>
}

void Comandos()
{
    return Variavel() && ComandosEspecificos() && Return();
}

void ComandosEspecificos()
{
    return Condicao() || Loop() || Operacao() || True;
}

void Condicao()
{
    return token(<IF>) && token(<APARENTESES>) && Operacao() &&
    token(<FPARENTESES>) && token(<ACHAVES>) && Comandos() && 
    token(<FCHAVES>) && Contradicao();
}

void Contradicao()
{
    return token(<ELSE>) && token(<ACHAVES>) && Comandos() &&
    token(<FCHAVES>) || True;
}

void Return()
{
    return token(<RETURN>) && Operacao() && token(<PONTOVIRGULA>) || True;
}

void Expressao()
{
    return token(<NUM>) || token(<ID>);
}

void Operacao()
{
    return Soma() || Subtracao() || Multiplicacao() || Divisao() ||
    Igual() || Atribuir() || Maiorque() || Menorque() || Maiorigualque() ||
    Menorigualque() || Negacao() || And() || Or() || Not() || Expressao() ||
    Variavel();
}

void Soma()
{
    return Operacao() && token(<SOMA>) && Operacao();
}

void Subtracao()
{
    return Operacao() && token(<SUBTRACAO>) && Operacao();
}

void Multiplicacao()
{
    return Operacao() && token(<MULTIPLICACAO>) && Operacao();
}

void Divisao()
{
    return Operacao() && token(<DIVISAO>) && Operacao();
}

void Igual()
{
    return Operacao() && token(<IGUALDADE>) && Operacao();
}

void Atribuir()
{
    return Expressao() && token(<ATRIBUICAO>) && Operacao();
}

void Maiorque()
{
    return Operacao() && token(<MAIOR>) && Operacao();
}

void Menorque()
{
    return Operacao() && token(<MENOR>) && Operacao();
}

void Maiorigualque()
{
    return Operacao() && token(<MAIORIGUAL>) && Operacao();
}

void Menorigualque()
{
    return Operacao() && token(<MENORIGUAL>) && Operacao();
}

void Negacao()
{
    return Operacao() && token(<NEGACAO>) && Operacao();
}

void And()
{
    return Operacao() && token(<AND>) && Operacao();
}

void Or()
{
    return Operacao() && token(<OR>) && Operacao();
}

void Not()
{
    return Operacao() && token(<NOT>) && Operacao();
}

void Variaveis()
{
    return token(<VIRGULA>) && token(<ID>) || True;
}

void Variavel()
{
    return TipoVariavel() && token(<ID>) && Variaveis() && Fimdelinha();
}

void TipoVariavel()
{
    return token(<INT>) && token(<CHAR>) && token(<VOID>);

}

void Loop()
{
    return token(<WHILE>) && token(<APARENTESES>) && Operacao() && token(<FPARENTESES>) &&
    token(<ACHAVES>) && Comandos() && token(<FCHAVES>) || token(<FOR>) && token(<APARENTESES>) &&
    Operacao() && token(<PONTOVIRGULA>) && Operacao() && token(<PONTOVIRGULA>) && Operacao() &&
    token(<FPARENTESES>) && token(<ACHAVES>) && Comandos() && token(<FCHAVES>);
}

void Fimdelinha()
{
    return token(<PONTOVIRGULA>) || True;
}