/* Generated By:JJTree&JavaCC: Do not edit this line. X.java */
import java.io.*;
import java.util.*;

public class X/*@bgen(jjtree)*/implements XTreeConstants, XConstants {/*@bgen(jjtree)*/
  protected static JJTXState jjtree = new JJTXState();
    public static void main(String args[]) throws ParseException, IOException {

        Scanner scan = new Scanner(System.in);
        String nomeArq;

        System.out.println("Digite o nome do arquivo: ");

        nomeArq = System.getProperty("user.dir") + "\\" + scan.nextLine();

        X lex = new X(new java.io.FileInputStream(nomeArq));
        SimpleNode root = lex.Start();
        root.dump("");

    }

  static final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Variavel();
      jj_consume_token(APARENTESES);
      jj_consume_token(FPARENTESES);
      jj_consume_token(ACHAVES);
      Comandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void X() throws ParseException {
 /*@bgen(jjtree) X */
 SimpleNode jjtn000 = new SimpleNode(JJTX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APARENTESES:
        case FPARENTESES:
        case ACOLCHETES:
        case FCOLCHETES:
        case ACHAVES:
        case FCHAVES:
        case PONTOVIRGULA:
        case VIRGULA:
        case INT:
        case CHAR:
        case IF:
        case ELSE:
        case WHILE:
        case FOR:
        case RETURN:
        case SOMA:
        case SUBTRACAO:
        case MULTIPLICACAO:
        case DIVISAO:
        case ATRIBUICAO:
        case IGUALDADE:
        case MAIOR:
        case MENOR:
        case MAIORIGUAL:
        case MENORIGUAL:
        case DIFERENTE:
        case AND:
        case OR:
        case NOT:
        case NUM:
        case ID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APARENTESES:
          jj_consume_token(APARENTESES);
                        System.out.println("Abre parenteses: (");
          break;
        case FPARENTESES:
          jj_consume_token(FPARENTESES);
                         System.out.println("Fecha parenteses: )");
          break;
        case ACOLCHETES:
          jj_consume_token(ACOLCHETES);
                        System.out.println("Abre colchetes: [");
          break;
        case FCOLCHETES:
          jj_consume_token(FCOLCHETES);
                        System.out.println("Fecha colchetes: ]");
          break;
        case ACHAVES:
          jj_consume_token(ACHAVES);
                     System.out.println("Abre chaves: {");
          break;
        case FCHAVES:
          jj_consume_token(FCHAVES);
                     System.out.println("Fecha chaves: }");
          break;
        case PONTOVIRGULA:
          jj_consume_token(PONTOVIRGULA);
                          System.out.println("Ponto e virgula: ;");
          break;
        case VIRGULA:
          jj_consume_token(VIRGULA);
                     System.out.println("Ponto e virgula: ,");
          break;
        case INT:
          jj_consume_token(INT);
                 System.out.println("Palavra reservada: int");
          break;
        case CHAR:
          jj_consume_token(CHAR);
                  System.out.println("Palavra reservada: char");
          break;
        case IF:
          jj_consume_token(IF);
                System.out.println("Palavra reservada: if");
          break;
        case ELSE:
          jj_consume_token(ELSE);
                  System.out.println("Palavra reservada: else");
          break;
        case WHILE:
          jj_consume_token(WHILE);
                   System.out.println("Palavra reservada: while");
          break;
        case FOR:
          jj_consume_token(FOR);
                 System.out.println("Palavra reservada: for");
          break;
        case RETURN:
          jj_consume_token(RETURN);
                    System.out.println("Palavra reservada: return");
          break;
        case SOMA:
          jj_consume_token(SOMA);
                  System.out.println("Operador: +");
          break;
        case SUBTRACAO:
          jj_consume_token(SUBTRACAO);
                       System.out.println("Operador: -");
          break;
        case MULTIPLICACAO:
          jj_consume_token(MULTIPLICACAO);
                           System.out.println("Operador: *");
          break;
        case DIVISAO:
          jj_consume_token(DIVISAO);
                     System.out.println("Operador: /");
          break;
        case ATRIBUICAO:
          jj_consume_token(ATRIBUICAO);
                        System.out.println("Operador: =");
          break;
        case IGUALDADE:
          jj_consume_token(IGUALDADE);
                       System.out.println("Operador: ==");
          break;
        case MAIOR:
          jj_consume_token(MAIOR);
                   System.out.println("Operador: >");
          break;
        case MENOR:
          jj_consume_token(MENOR);
                   System.out.println("Operador: <");
          break;
        case MAIORIGUAL:
          jj_consume_token(MAIORIGUAL);
                        System.out.println("Operador: >=");
          break;
        case MENORIGUAL:
          jj_consume_token(MENORIGUAL);
                        System.out.println("Operador: <=");
          break;
        case DIFERENTE:
          jj_consume_token(DIFERENTE);
                       System.out.println("Operador: !=");
          break;
        case AND:
          jj_consume_token(AND);
                 System.out.println("Operador: &&");
          break;
        case OR:
          jj_consume_token(OR);
                System.out.println("Operador: ||");
          break;
        case NOT:
          jj_consume_token(NOT);
                 System.out.println("Operador: !");
          break;
        case NUM:
          t = jj_consume_token(NUM);
                     System.out.println("N\u00c3\u00bamero: " + t.image);
          break;
        case ID:
          t = jj_consume_token(ID);
                    System.out.println("Identificador: " + t.image);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Comandos() throws ParseException {
 /*@bgen(jjtree) COM */
  SimpleNode jjtn000 = new SimpleNode(JJTCOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case CHAR:
        case VOID:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        Variavel();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case FOR:
        case NOT:
        case NUM:
        case ID:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        ComandosEspecificos();
      }
      Return();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ComandosEspecificos() throws ParseException {
 /*@bgen(jjtree) COMES */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        Condicao();
        break;
      case WHILE:
      case FOR:
        Loop();
        break;
      case NOT:
      case NUM:
      case ID:
        Operacao();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Condicao() throws ParseException {
 /*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(APARENTESES);
      Operacao();
      jj_consume_token(FPARENTESES);
      jj_consume_token(ACHAVES);
      Comandos();
      jj_consume_token(FCHAVES);
      Contradicao();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Contradicao() throws ParseException {
 /*@bgen(jjtree) ELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(ACHAVES);
        Comandos();
        jj_consume_token(FCHAVES);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Return() throws ParseException {
 /*@bgen(jjtree) RET */
  SimpleNode jjtn000 = new SimpleNode(JJTRET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        Variavel();
        jj_consume_token(PONTOVIRGULA);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Operacao() throws ParseException {
 /*@bgen(jjtree) OP */
  SimpleNode jjtn000 = new SimpleNode(JJTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case ID:
        Operando();
        SinalOp();
        Operando();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOMA:
        case SUBTRACAO:
        case MULTIPLICACAO:
        case DIVISAO:
        case ATRIBUICAO:
        case IGUALDADE:
        case MAIOR:
        case MENOR:
        case MAIORIGUAL:
        case MENORIGUAL:
        case DIFERENTE:
        case AND:
        case OR:
          SinalOp();
          Operando();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        Fimdelinha();
        break;
      case NOT:
        Not();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Operando() throws ParseException {
 /*@bgen(jjtree) OPVAR */
  SimpleNode jjtn000 = new SimpleNode(JJTOPVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void SinalOp() throws ParseException {
 /*@bgen(jjtree) SOP */
  SimpleNode jjtn000 = new SimpleNode(JJTSOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        jj_consume_token(SOMA);
        break;
      case SUBTRACAO:
        jj_consume_token(SUBTRACAO);
        break;
      case MULTIPLICACAO:
        jj_consume_token(MULTIPLICACAO);
        break;
      case DIVISAO:
        jj_consume_token(DIVISAO);
        break;
      case IGUALDADE:
        jj_consume_token(IGUALDADE);
        break;
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
        break;
      case MAIOR:
        jj_consume_token(MAIOR);
        break;
      case MENOR:
        jj_consume_token(MENOR);
        break;
      case MAIORIGUAL:
        jj_consume_token(MAIORIGUAL);
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
        break;
      case DIFERENTE:
        jj_consume_token(DIFERENTE);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Not() throws ParseException {
 /*@bgen(jjtree) NOT */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      Variavel();
      Fimdelinha();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Variaveis() throws ParseException {
 /*@bgen(jjtree) VARPLUS */
  SimpleNode jjtn000 = new SimpleNode(JJTVARPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VIRGULA);
      jj_consume_token(ID);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Variavel() throws ParseException {
 /*@bgen(jjtree) VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TipoVariavel();
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        Variaveis();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      Fimdelinha();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void TipoVariavel() throws ParseException {
 /*@bgen(jjtree) VARTYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTVARTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Loop() throws ParseException {
 /*@bgen(jjtree) LOOP */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(APARENTESES);
        Operacao();
        jj_consume_token(FPARENTESES);
        jj_consume_token(ACHAVES);
        Comandos();
        jj_consume_token(FCHAVES);
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(APARENTESES);
        Operacao();
        jj_consume_token(PONTOVIRGULA);
        Operacao();
        jj_consume_token(PONTOVIRGULA);
        Operacao();
        jj_consume_token(FPARENTESES);
        jj_consume_token(ACHAVES);
        Comandos();
        jj_consume_token(FCHAVES);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Fimdelinha() throws ParseException {
 /*@bgen(jjtree) PV */
  SimpleNode jjtn000 = new SimpleNode(JJTPV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTOVIRGULA:
        jj_consume_token(PONTOVIRGULA);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public XTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffff7fe0,0xffff7fe0,0xe000,0xd0000,0xd0000,0x20000,0x100000,0xffe00000,0x0,0x0,0xffe00000,0x1000,0xe000,0xc0000,0x800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1f,0x1f,0x0,0x1c,0x1c,0x0,0x0,0x3,0x1c,0x18,0x3,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public X(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public X(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public X(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public X(XTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(XTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
